// src/generator.ts
// This file is responsible for taking the parsed route data and generating
// the actual type-safe route helper functions.

import { writeFileSync } from 'fs'; // For writing the generated file
import { join } from 'path';        // For constructing the output file path

// Define the shape of the route data we expect to receive
interface RouteData {
  filePath: string;
  routePath: string; // e.g., '/products/:id' or '/about'
  params: { name: string; type: string; }[]; // e.g., [{ name: 'slug', type: 'string' }]
}

/**
 * Generates a TypeScript file with type-safe route helper functions.
 * @param routes An array of discovered route data.
 */
export function generateRoutesFile(routes: RouteData[]) {
  const outputPath = join(process.cwd(), 'src', 'generated-routes.ts');
  let fileContent = `// This file is auto-generated by your-router-gen. Do not modify.\n\n`;
  fileContent += `/**
 * Type-safe route helpers generated from your file-based routing.
 * Use these functions for safe navigation and link creation.
 */\n`;

  fileContent += `export const Routes = {\n`;

  routes.forEach(route => {
    // --- DEBUGGING LOGS START ---
    console.log(`\nDEBUG: Processing routePath: ${route.routePath}`);
    let tempRouteName = route.routePath;
    console.log(`DEBUG: 1. Initial tempRouteName: ${tempRouteName}`);

    // Remove leading slash
    tempRouteName = tempRouteName.replace(/^\//, '');
    console.log(`DEBUG: 2. After removing leading slash: ${tempRouteName}`);

    // Remove colons from dynamic segments (e.g., "blog/:slug" -> "blog/slug")
    // This regex looks for patterns like ':name' and replaces with just 'name'
    tempRouteName = tempRouteName.replace(/:([a-zA-Z0-9_]+)/g, '$1');
    console.log(`DEBUG: 3. After removing colons from params: ${tempRouteName}`);

    // Replace slashes with dots (e.g., "blog/slug" -> "blog.slug")
    tempRouteName = tempRouteName.replace(/\//g, '.');
    console.log(`DEBUG: 4. After replacing slashes with dots: ${tempRouteName}`);

    const routeName = (route.routePath === '/') ? 'home' : tempRouteName;
    console.log(`DEBUG: 5. Final routeName: ${routeName}`);
    // --- DEBUGGING LOGS END ---


    if (route.params.length > 0) {
      const paramList = route.params.map(p => `${p.name}: ${p.type}`).join(', ');
      let pathConstruction = route.routePath;
      route.params.forEach(p => {
        pathConstruction = pathConstruction.replace(`:${p.name}`, `\${params.${p.name}}`);
      });

      fileContent += `  ${routeName}: (params: { ${paramList} }) => \`${pathConstruction}\`,\n`;
    } else {
      fileContent += `  ${routeName}: () => "${route.routePath}",\n`;
    }
  });

  fileContent += `};\n\n`;

  fileContent += `/**
 * Union type of all generated route names.
 */\n`;
  fileContent += `export type RouteNames = keyof typeof Routes;\n\n`;
  fileContent += `/**
 * Union type of all generated route paths (the actual URL strings).
 */\n`;
  fileContent += `export type RoutePaths = ReturnType<typeof Routes[RouteNames]>;\n`;


  try {
    writeFileSync(outputPath, fileContent, 'utf-8');
    console.log(`\nSUCCESS: Generated routes file at: ${outputPath}`);
  } catch (error) {
    console.error(`\nERROR: Could not generate routes file: ${outputPath}`);
    if (error instanceof Error) {
      console.error(`Reason: ${error.message}`);
    } else {
      console.error(error);
    }
  }
}