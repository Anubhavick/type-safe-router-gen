import { writeFileSync, existsSync } from 'fs';

export function migrateToAppRouter(pagesDir: string, _appDir: string): void {
  console.log('\x1b[33mMigrating from Pages Router to App Router...\x1b[0m\n');
  
  if (!existsSync(pagesDir)) {
    console.error('\x1b[31mError: Pages directory does not exist\x1b[0m');
    return;
  }

  // Create migration guide
  let migrationGuide = `# Pages Router to App Router Migration Guide

Generated on: ${new Date().toISOString()}

## Changes Made

`;

  // Basic file structure suggestions
  migrationGuide += `
## Migration Steps

1. **Create app directory structure**
2. **Move page files to app/[route]/page.tsx**
3. **Update imports to use generated Routes**
4. **Test all routes work correctly**

## File Mappings

| Pages Router | App Router | Status |
|--------------|------------|--------|
`;

  // Add example mappings
  migrationGuide += `| \`pages/index.tsx\` | \`app/page.tsx\` | ✅ Ready |
| \`pages/about.tsx\` | \`app/about/page.tsx\` | ✅ Ready |
| \`pages/blog/[slug].tsx\` | \`app/blog/[slug]/page.tsx\` | ✅ Ready |
| \`pages/_app.tsx\` | \`app/layout.tsx\` | ⚠️ Requires manual changes |
| \`pages/_document.tsx\` | Remove (handled by App Router) | ⚠️ Manual removal needed |

## Generated Commands

\`\`\`bash
# Re-generate routes for App Router
npx router-gen generate --framework nextjs-app --input ./app

# Validate the migration
npx router-gen validate --strict
\`\`\`

## Manual Steps Required

1. **Update _app.tsx to layout.tsx**
   - Move global providers to app/layout.tsx
   - Update component structure for App Router

2. **Update API routes** (if any)
   - API routes remain in pages/api/ or move to app/api/

3. **Update getServerSideProps/getStaticProps**
   - Convert to Server Components or use new data fetching patterns

## Recommendations

- Test each route individually after migration
- Use the validate command to ensure all routes work
- Consider using Server Components for better performance
- Update metadata using the new Metadata API

---

*Generated by [type-safe-router-gen](https://www.npmjs.com/package/type-safe-router-gen)*
`;

  const migrationPath = './MIGRATION_GUIDE.md';
  writeFileSync(migrationPath, migrationGuide, 'utf-8');
  
  console.log('\x1b[32mMigration guide generated!\x1b[0m');
  console.log(`\x1b[36mGuide saved to: ${migrationPath}\x1b[0m`);
  console.log('\n\x1b[33mNext steps:\x1b[0m');
  console.log('1. Review the migration guide');
  console.log('2. Create app directory structure');
  console.log('3. Re-run: npx router-gen generate --framework nextjs-app --input ./app');
  console.log('4. Validate: npx router-gen validate --strict');
}

export function generateMigrationScript(fromFramework: string, toFramework: string): void {
  console.log(`\x1b[33mGenerating migration script from ${fromFramework} to ${toFramework}...\x1b[0m`);
  
  let script = `#!/bin/bash
# Migration script from ${fromFramework} to ${toFramework}
# Generated by type-safe-router-gen

echo "Starting migration from ${fromFramework} to ${toFramework}..."

`;

  switch (`${fromFramework}-${toFramework}`) {
    case 'nextjs-nextjs-app':
      script += `
# Backup current setup
cp -r pages pages_backup
echo "✅ Backup created: pages_backup"

# Create app directory
mkdir -p app
echo "✅ Created app directory"

# Generate new routes for App Router
npx router-gen generate --framework nextjs-app --input ./app --output ./src/app-routes.ts
echo "✅ Generated App Router routes"

echo "⚠️  Manual steps required:"
echo "   1. Move page files to app/[route]/page.tsx structure"
echo "   2. Convert _app.tsx to app/layout.tsx"
echo "   3. Update imports to use new routes"
echo "   4. Test all routes: npx router-gen validate --strict"
`;
      break;
      
    case 'nextjs-remix':
      script += `
# Create Remix app structure
mkdir -p app/routes
echo "✅ Created Remix app structure"

# Generate Remix routes
npx router-gen generate --framework remix --input ./app/routes --output ./app/routes-generated.ts
echo "✅ Generated Remix routes"

echo "⚠️  Manual steps required:"
echo "   1. Convert Next.js pages to Remix routes"
echo "   2. Update data fetching (getServerSideProps → loader)"
echo "   3. Update client-side routing"
`;
      break;
      
    default:
      script += `
echo "Migration from ${fromFramework} to ${toFramework} requires manual intervention"
echo "Please refer to the respective framework documentation"
`;
  }

  script += `
echo "Migration script complete!"
echo "Run 'npx router-gen health' to check your setup"
`;

  const scriptPath = './migrate.sh';
  writeFileSync(scriptPath, script, 'utf-8');
  
  // Make script executable
  try {
    require('fs').chmodSync(scriptPath, '755');
  } catch (error) {
    // Ignore chmod errors on Windows
  }
  
  console.log(`\x1b[32mMigration script generated: ${scriptPath}\x1b[0m`);
  console.log('\x1b[36mRun: ./migrate.sh\x1b[0m');
}
